-- lua/welcome-time/init.lua

local M = {}
M.win_id = nil -- –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –æ–∫–Ω–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–º
M.buf_id = nil -- –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –±—É—Ñ–µ—Ä–∞
M.timer_id = nil -- –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Ç–∞–π–º–µ—Ä–∞
M.time_line_nr = nil -- –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏ —Å –≤—Ä–µ–º–µ–Ω–µ–º

local default_config = {
  art = { "" },
  quotes = {
    "The computer was created to solve problems that did not exist before.",
    "Simplicity is the soul of effectiveness.",
  },
  username = vim.fn.expand "$USER",
  greetings = {
    morning = "Good morning, %s! ‚òÄÔ∏è", -- 6:00 - 11:59
    afternoon = "Good afternoon, %s! üåû", -- 12:00 - 17:59
    evening = "Good evening, %s! üåÜ", -- 18:00 - 21:59
    night = "Good night, %s! üåô"
  },
  show_time = true,
  show_date = true,
  auto_close_time = 5000,
  close_on_file_open = true,
  highlight_group = "Title",
}

local config = {}

-- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –¥–Ω—è
local function get_time_period()
  local hour = tonumber(os.date "%H")

  if hour >= 6 and hour < 12 then
    return "morning"
  elseif hour >= 12 and hour < 18 then
    return "afternoon"
  elseif hour >= 18 and hour < 22 then
    return "evening"
  else
    return "night"
  end
end

-- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
local function get_greeting()
  local period = get_time_period()
  local greeting_template = config.greetings[period]
  return string.format(greeting_template, config.username)
end

local function update_time_display()
  -- –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –≤—Å–µ –µ—â–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–µ–∂–¥–µ —á–µ–º –æ–±–Ω–æ–≤–ª—è—Ç—å
  if not (M.buf_id and vim.api.nvim_buf_is_valid(M.buf_id) and M.time_line_nr) then
    return
  end

  -- –í—Ä–µ–º–µ–Ω–Ω–æ –¥–µ–ª–∞–µ–º –±—É—Ñ–µ—Ä –∏–∑–º–µ–Ω—è–µ–º—ã–º
  vim.api.nvim_buf_set_option(M.buf_id, "modifiable", true)

  local new_time_line = "Time: " .. os.date "%H:%M:%S"
  local win_width = vim.api.nvim_win_get_width(M.win_id)
  local padding = math.floor((win_width - vim.fn.strwidth(new_time_line)) / 2)
  local centered_line = string.rep(" ", padding) .. new_time_line

  vim.api.nvim_buf_set_lines(M.buf_id, M.time_line_nr - 1, M.time_line_nr, false, { centered_line })

  -- –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ
  vim.api.nvim_buf_set_option(M.buf_id, "modifiable", false)
end

function M.close()
  -- –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
  if M.timer_id then
    vim.fn.timer_stop(M.timer_id)
    M.timer_id = nil
  end

  -- –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
  if M.win_id and vim.api.nvim_win_is_valid(M.win_id) then
    vim.api.nvim_win_close(M.win_id, true)
  end

  -- –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  M.win_id = nil
  M.buf_id = nil
  M.time_line_nr = nil
end

-- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
local function show_welcome()
  local lines = {}

  -- –î–æ–±–∞–≤–ª—è–µ–º ASCII-–∞—Ä—Ç
  if config.art and #config.art > 0 then
    for _, art_line in ipairs(config.art) do
      table.insert(lines, art_line)
    end
    table.insert(lines, "")
  end

  -- –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
  table.insert(lines, get_greeting())

  -- –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
  table.insert(lines, "")

  -- –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—á–∞–π–Ω—É—é —Ü–∏—Ç–∞—Ç—É
  if config.quotes and #config.quotes > 0 then
    math.randomseed(os.time())
    local random_quote = config.quotes[math.random(#config.quotes)]
    table.insert(lines, '"' .. random_quote .. '"')
  end

  table.insert(lines, "")

  -- –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
  if config.show_time then
    table.insert(lines, "Time: " .. os.date "%H:%M:%S")
    M.time_line_nr = #lines -- –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏
  end

  -- –î–æ–±–∞–≤–ª—è–µ–º –¥–∞—Ç—É, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
  if config.show_date then
    table.insert(lines, "Date: " .. os.date "%Y-%m-%d")
  end

  -- –°–æ–∑–¥–∞–µ–º –±—É—Ñ–µ—Ä –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
  local buf = vim.api.nvim_create_buf(false, true)
  M.buf_id = buf -- –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –±—É—Ñ–µ—Ä–∞cd
  vim.api.nvim_buf_set_lines(buf, 0, -1, false, lines)
  vim.api.nvim_buf_set_option(buf, "buftype", "nofile")
  vim.api.nvim_buf_set_option(buf, "bufhidden", "wipe")

  -- –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–º–µ—Ä—ã –æ–∫–Ω–∞
  local width = vim.api.nvim_get_option "columns"
  local height = vim.api.nvim_get_option "lines"

  local win_width = math.min(60, width - 4)
  local win_height = #lines + 2
  local row = math.ceil((height - win_height) / 2)
  local col = math.ceil((width - win_width) / 2)

  -- –°–æ–∑–¥–∞–µ–º –ø–ª–∞–≤–∞—é—â–µ–µ –æ–∫–Ω–æ
  local win_opts = {
    relative = "editor",
    width = win_width,
    height = win_height,
    row = row,
    col = col,
    style = "minimal",
    border = "rounded",
    title = " Welcome! ",
    title_pos = "center",
  }

  local win = vim.api.nvim_open_win(buf, false, win_opts)
  M.win_id = win -- –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –æ–∫–Ω–∞

  -- –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É
  vim.api.nvim_win_set_option(win, "winhighlight", "Normal:" .. config.highlight_group)

  -- –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
  for i, line in ipairs(lines) do
    if line ~= "" then
      local padding = math.floor((win_width - vim.fn.strwidth(line)) / 2)
      local centered_line = string.rep(" ", padding) .. line
      vim.api.nvim_buf_set_lines(buf, i - 1, i, false, { centered_line })
    end
  end

  -- –î–µ–ª–∞–µ–º –±—É—Ñ–µ—Ä –Ω–µ–º–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º—ã–º –ü–û–°–õ–ï –≤—Å–µ—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
  vim.api.nvim_buf_set_option(buf, "modifiable", false)

  -- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ, –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ.
  -- –≠—Ç–æ—Ç —Ç–∞–π–º–µ—Ä –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç, –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞ –æ–ø—Ü–∏—è close_on_file_open.
  if config.auto_close_time > 0 and not config.close_on_file_open then
    vim.defer_fn(function()
      M.close()
    end, config.auto_close_time)
  end

  -- –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏, –µ—Å–ª–∏ –æ–ø—Ü–∏—è –≤–∫–ª—é—á–µ–Ω–∞
  if config.show_time then
    M.timer_id = vim.fn.timer_start(1000, function()
      vim.schedule(update_time_display)
    end, { ["repeat"] = -1 })
  end

  -- –î–æ–±–∞–≤–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞–∫—Ä—ã—Ç—å –æ–∫–Ω–æ –Ω–∞–∂–∞—Ç–∏–µ–º –ª—é–±–æ–π –∫–ª–∞–≤–∏—à–∏
  vim.api.nvim_buf_set_keymap(
    buf,
    "n",
    "<ESC>",
    '<cmd>lua require("welcome-time").close()<cr>',
    { noremap = true, silent = true }
  )
  vim.api.nvim_buf_set_keymap(
    buf,
    "n",
    "q",
    '<cmd>lua require("welcome-time").close()<cr>',
    { noremap = true, silent = true }
  )
  vim.api.nvim_buf_set_keymap(
    buf,
    "n",
    "<CR>",
    '<cmd>lua require("welcome-time").close()<cr>',
    { noremap = true, silent = true }
  )
end

-- –§—É–Ω–∫—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–ª–∞–≥–∏–Ω–∞
function M.setup(user_config)
  -- –û–±—ä–µ–¥–∏–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  config = vim.tbl_deep_extend("force", default_config, user_config or {})

  -- –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—É –∞–≤—Ç–æ–∫–æ–º–∞–Ω–¥, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
  local augroup = vim.api.nvim_create_augroup("WelcomeTime", { clear = true })

  -- –°–æ–∑–¥–∞–µ–º –∞–≤—Ç–æ–∫–æ–º–∞–Ω–¥—É –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
  vim.api.nvim_create_autocmd("VimEnter", {
    group = augroup,
    callback = function()
      -- –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –æ—Ç–∫—Ä—ã—Ç—ã —Ñ–∞–π–ª—ã
      if vim.fn.argc() == 0 and vim.bo.filetype == "" then
        vim.defer_fn(show_welcome, 100) -- –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
      end
    end,
    desc = "Show welcome message on startup",
  })

  -- –°–æ–∑–¥–∞–µ–º –∞–≤—Ç–æ–∫–æ–º–∞–Ω–¥—É –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Ñ–∞–π–ª–∞
  if config.close_on_file_open then
    vim.api.nvim_create_autocmd("BufEnter", {
      group = augroup,
      callback = function()
        -- –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–∫–Ω–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –µ—â–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if M.win_id and vim.api.nvim_win_is_valid(M.win_id) then
          local bufnr = vim.api.nvim_get_current_buf()
          -- –ó–∞–∫—Ä—ã–≤–∞–µ–º, –µ—Å–ª–∏ —ç—Ç–æ –æ–±—ã—á–Ω—ã–π –±—É—Ñ–µ—Ä —Å —Ñ–∞–π–ª–æ–º (–∞ –Ω–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–µ—Ä–µ–≤–æ —Ñ–∞–π–ª–æ–≤)
          if vim.fn.buflisted(bufnr) == 1 and vim.bo[bufnr].buftype == "" then
            M.close()
          end
        end
      end,
      desc = "Close welcome message on file open",
    })
  end
end

-- –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –ø–æ–∫–∞–∑–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
vim.api.nvim_create_user_command("WelcomeShow", show_welcome, {
  desc = "Show welcome message",
})

return M
